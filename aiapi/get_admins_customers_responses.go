// Code generated by go-swagger; DO NOT EDIT.

package aiapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Maritime-AI/mai-go-client/models"
)

// GetAdminsCustomersReader is a Reader for the GetAdminsCustomers structure.
type GetAdminsCustomersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAdminsCustomersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAdminsCustomersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAdminsCustomersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAdminsCustomersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAdminsCustomersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /admins/customers] GetAdminsCustomers", response, response.Code())
	}
}

// NewGetAdminsCustomersOK creates a GetAdminsCustomersOK with default headers values
func NewGetAdminsCustomersOK() *GetAdminsCustomersOK {
	return &GetAdminsCustomersOK{}
}

/*
GetAdminsCustomersOK describes a response with status code 200, with default header values.

Success
*/
type GetAdminsCustomersOK struct {
	Payload []*models.Customer
}

// IsSuccess returns true when this get admins customers o k response has a 2xx status code
func (o *GetAdminsCustomersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get admins customers o k response has a 3xx status code
func (o *GetAdminsCustomersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get admins customers o k response has a 4xx status code
func (o *GetAdminsCustomersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get admins customers o k response has a 5xx status code
func (o *GetAdminsCustomersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get admins customers o k response a status code equal to that given
func (o *GetAdminsCustomersOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get admins customers o k response
func (o *GetAdminsCustomersOK) Code() int {
	return 200
}

func (o *GetAdminsCustomersOK) Error() string {
	return fmt.Sprintf("[GET /admins/customers][%d] getAdminsCustomersOK  %+v", 200, o.Payload)
}

func (o *GetAdminsCustomersOK) String() string {
	return fmt.Sprintf("[GET /admins/customers][%d] getAdminsCustomersOK  %+v", 200, o.Payload)
}

func (o *GetAdminsCustomersOK) GetPayload() []*models.Customer {
	return o.Payload
}

func (o *GetAdminsCustomersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdminsCustomersBadRequest creates a GetAdminsCustomersBadRequest with default headers values
func NewGetAdminsCustomersBadRequest() *GetAdminsCustomersBadRequest {
	return &GetAdminsCustomersBadRequest{}
}

/*
GetAdminsCustomersBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAdminsCustomersBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get admins customers bad request response has a 2xx status code
func (o *GetAdminsCustomersBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get admins customers bad request response has a 3xx status code
func (o *GetAdminsCustomersBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get admins customers bad request response has a 4xx status code
func (o *GetAdminsCustomersBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get admins customers bad request response has a 5xx status code
func (o *GetAdminsCustomersBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get admins customers bad request response a status code equal to that given
func (o *GetAdminsCustomersBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get admins customers bad request response
func (o *GetAdminsCustomersBadRequest) Code() int {
	return 400
}

func (o *GetAdminsCustomersBadRequest) Error() string {
	return fmt.Sprintf("[GET /admins/customers][%d] getAdminsCustomersBadRequest  %+v", 400, o.Payload)
}

func (o *GetAdminsCustomersBadRequest) String() string {
	return fmt.Sprintf("[GET /admins/customers][%d] getAdminsCustomersBadRequest  %+v", 400, o.Payload)
}

func (o *GetAdminsCustomersBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAdminsCustomersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdminsCustomersUnauthorized creates a GetAdminsCustomersUnauthorized with default headers values
func NewGetAdminsCustomersUnauthorized() *GetAdminsCustomersUnauthorized {
	return &GetAdminsCustomersUnauthorized{}
}

/*
GetAdminsCustomersUnauthorized describes a response with status code 401, with default header values.

Not Authorized
*/
type GetAdminsCustomersUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get admins customers unauthorized response has a 2xx status code
func (o *GetAdminsCustomersUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get admins customers unauthorized response has a 3xx status code
func (o *GetAdminsCustomersUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get admins customers unauthorized response has a 4xx status code
func (o *GetAdminsCustomersUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get admins customers unauthorized response has a 5xx status code
func (o *GetAdminsCustomersUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get admins customers unauthorized response a status code equal to that given
func (o *GetAdminsCustomersUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get admins customers unauthorized response
func (o *GetAdminsCustomersUnauthorized) Code() int {
	return 401
}

func (o *GetAdminsCustomersUnauthorized) Error() string {
	return fmt.Sprintf("[GET /admins/customers][%d] getAdminsCustomersUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAdminsCustomersUnauthorized) String() string {
	return fmt.Sprintf("[GET /admins/customers][%d] getAdminsCustomersUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAdminsCustomersUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAdminsCustomersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdminsCustomersInternalServerError creates a GetAdminsCustomersInternalServerError with default headers values
func NewGetAdminsCustomersInternalServerError() *GetAdminsCustomersInternalServerError {
	return &GetAdminsCustomersInternalServerError{}
}

/*
GetAdminsCustomersInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetAdminsCustomersInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this get admins customers internal server error response has a 2xx status code
func (o *GetAdminsCustomersInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get admins customers internal server error response has a 3xx status code
func (o *GetAdminsCustomersInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get admins customers internal server error response has a 4xx status code
func (o *GetAdminsCustomersInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get admins customers internal server error response has a 5xx status code
func (o *GetAdminsCustomersInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get admins customers internal server error response a status code equal to that given
func (o *GetAdminsCustomersInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get admins customers internal server error response
func (o *GetAdminsCustomersInternalServerError) Code() int {
	return 500
}

func (o *GetAdminsCustomersInternalServerError) Error() string {
	return fmt.Sprintf("[GET /admins/customers][%d] getAdminsCustomersInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAdminsCustomersInternalServerError) String() string {
	return fmt.Sprintf("[GET /admins/customers][%d] getAdminsCustomersInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAdminsCustomersInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAdminsCustomersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
