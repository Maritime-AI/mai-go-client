// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CrewParams crew params
//
// swagger:model CrewParams
type CrewParams struct {

	// The city of the user
	City *string `json:"city,omitempty"`

	// The unique reference id for the context
	ContextRefID string `json:"context_ref_id,omitempty"`

	// The country of the user
	Country *string `json:"country,omitempty"`

	// The credentials of the user
	Credentials []*CredentialParams `json:"credentials"`

	// The unique external id for the crew
	CrewExternalID string `json:"crew_external_id,omitempty"`

	// The email of the user
	Email *string `json:"email,omitempty"`

	// The first name of the user
	FirstName string `json:"first_name,omitempty"`

	// The job title of the user
	JobTitle *string `json:"job_title,omitempty"`

	// The last name of the user
	LastName string `json:"last_name,omitempty"`

	// The middle name of the user
	MiddleName *string `json:"middle_name,omitempty"`

	// The unique partner organization reference id
	PartnerOrganizationID *string `json:"partner_organization_id,omitempty"`

	// The phone of the user
	Phone *string `json:"phone,omitempty"`

	// The seatime of the user
	Seatime []*SeatimeParams `json:"seatime"`

	// The state of the user
	State *string `json:"state,omitempty"`
}

// Validate validates this crew params
func (m *CrewParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeatime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CrewParams) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	for i := 0; i < len(m.Credentials); i++ {
		if swag.IsZero(m.Credentials[i]) { // not required
			continue
		}

		if m.Credentials[i] != nil {
			if err := m.Credentials[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("credentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("credentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CrewParams) validateSeatime(formats strfmt.Registry) error {
	if swag.IsZero(m.Seatime) { // not required
		return nil
	}

	for i := 0; i < len(m.Seatime); i++ {
		if swag.IsZero(m.Seatime[i]) { // not required
			continue
		}

		if m.Seatime[i] != nil {
			if err := m.Seatime[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("seatime" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("seatime" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this crew params based on the context it is used
func (m *CrewParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeatime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CrewParams) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Credentials); i++ {

		if m.Credentials[i] != nil {

			if swag.IsZero(m.Credentials[i]) { // not required
				return nil
			}

			if err := m.Credentials[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("credentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("credentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CrewParams) contextValidateSeatime(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Seatime); i++ {

		if m.Seatime[i] != nil {

			if swag.IsZero(m.Seatime[i]) { // not required
				return nil
			}

			if err := m.Seatime[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("seatime" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("seatime" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CrewParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CrewParams) UnmarshalBinary(b []byte) error {
	var res CrewParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
