// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SeatimeParams seatime params
//
// swagger:model SeatimeParams
type SeatimeParams struct {

	// company name
	CompanyName *string `json:"company_name,omitempty"`

	// compensation
	Compensation *string `json:"compensation,omitempty"`

	// compensation frequency
	CompensationFrequency *string `json:"compensation_frequency,omitempty"`

	// crewed off
	// Format: date
	CrewedOff *strfmt.Date `json:"crewed_off,omitempty"`

	// crewed on
	// Format: date
	CrewedOn *strfmt.Date `json:"crewed_on,omitempty"`

	// The unique reference id of sea time record
	ExternalID string `json:"external_id,omitempty"`

	// is crewed on
	IsCrewedOn *bool `json:"is_crewed_on,omitempty"`

	// The total number of days the mariner has been at sea before shift in hours is applied
	NumDays *float64 `json:"num_days,omitempty"`

	// The position the mariner sailed as
	Position *string `json:"position,omitempty"`

	// shift in hours
	ShiftInHours *int64 `json:"shift_in_hours,omitempty"`

	// vessel capacity gt
	VesselCapacityGt *int64 `json:"vessel_capacity_gt,omitempty"`

	// vessel flag
	VesselFlag *string `json:"vessel_flag,omitempty"`

	// vessel horse power
	VesselHorsePower *float64 `json:"vessel_horse_power,omitempty"`

	// vessel imo number
	VesselImoNumber *int64 `json:"vessel_imo_number,omitempty"`

	// vessel mmsi number
	VesselMmsiNumber *int64 `json:"vessel_mmsi_number,omitempty"`

	// vessel name
	VesselName string `json:"vessel_name,omitempty"`

	// vessel propulsion type
	VesselPropulsionType *string `json:"vessel_propulsion_type,omitempty"`

	// vessel type
	VesselType *string `json:"vessel_type,omitempty"`

	// water way
	WaterWay *string `json:"water_way,omitempty"`
}

// Validate validates this seatime params
func (m *SeatimeParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCrewedOff(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrewedOn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SeatimeParams) validateCrewedOff(formats strfmt.Registry) error {
	if swag.IsZero(m.CrewedOff) { // not required
		return nil
	}

	if err := validate.FormatOf("crewed_off", "body", "date", m.CrewedOff.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SeatimeParams) validateCrewedOn(formats strfmt.Registry) error {
	if swag.IsZero(m.CrewedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("crewed_on", "body", "date", m.CrewedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this seatime params based on context it is used
func (m *SeatimeParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SeatimeParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SeatimeParams) UnmarshalBinary(b []byte) error {
	var res SeatimeParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
