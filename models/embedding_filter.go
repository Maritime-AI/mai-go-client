// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EmbeddingFilter embedding filter
//
// swagger:model EmbeddingFilter
type EmbeddingFilter struct {

	// hit types
	HitTypes []string `json:"hit_types"`

	// is embedding filter
	IsEmbeddingFilter bool `json:"is_embedding_filter,omitempty"`

	// match score
	MatchScore float64 `json:"match_score,omitempty"`

	// q
	Q string `json:"q,omitempty"`

	// time range end at
	// Format: date-time
	TimeRangeEndAt *strfmt.DateTime `json:"time_range_end_at,omitempty"`

	// time range start at
	// Format: date-time
	TimeRangeStartAt *strfmt.DateTime `json:"time_range_start_at,omitempty"`
}

// Validate validates this embedding filter
func (m *EmbeddingFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTimeRangeEndAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeRangeStartAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmbeddingFilter) validateTimeRangeEndAt(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeRangeEndAt) { // not required
		return nil
	}

	if err := validate.FormatOf("time_range_end_at", "body", "date-time", m.TimeRangeEndAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EmbeddingFilter) validateTimeRangeStartAt(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeRangeStartAt) { // not required
		return nil
	}

	if err := validate.FormatOf("time_range_start_at", "body", "date-time", m.TimeRangeStartAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this embedding filter based on context it is used
func (m *EmbeddingFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EmbeddingFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EmbeddingFilter) UnmarshalBinary(b []byte) error {
	var res EmbeddingFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
