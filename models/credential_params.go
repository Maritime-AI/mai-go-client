// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CredentialParams credential params
//
// swagger:model CredentialParams
type CredentialParams struct {

	// The endorsements associated with the credential
	Endorsements []string `json:"endorsements"`

	// The date the credential expires
	// Format: date
	ExpirationDate *strfmt.Date `json:"expiration_date,omitempty"`

	// The unique reference id of the credential
	ExternalID string `json:"external_id,omitempty"`

	// The date the credential was issued
	// Format: date
	IssuedDate *strfmt.Date `json:"issued_date,omitempty"`

	// The number of the credential
	Number *string `json:"number,omitempty"`

	// The title of the credential
	Title string `json:"title,omitempty"`

	// The type of the credential
	Type *string `json:"type,omitempty"`
}

// Validate validates this credential params
func (m *CredentialParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpirationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CredentialParams) validateExpirationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expiration_date", "body", "date", m.ExpirationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CredentialParams) validateIssuedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.IssuedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("issued_date", "body", "date", m.IssuedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this credential params based on context it is used
func (m *CredentialParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CredentialParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CredentialParams) UnmarshalBinary(b []byte) error {
	var res CredentialParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
